name: Semantic Release

on:
  pull_request:
    types: [closed]
    paths:
      - .github/workflows/**
      - modules/**
      - template/**
      - databricks_template_schema.json

jobs:
  release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository and fetch all history and tags
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          ref: 'main'     # Ensure you're on the main branch
          fetch-depth: 0  # Fetch all history and tags

      # # Step 2: Fetch and rebase onto the latest remote main branch
      # - name: Fetch and Rebase onto latest main
      #   run: |
      #     echo "Fetching and rebasing onto the latest main branch..."
      #     git fetch origin
      #     git rebase origin/main

      # Step 3: Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Step 4: Install Semantic Release
      - name: Install Semantic Release
        run: npm install semantic-release

      # Step 5: Run Semantic Release
      - name: Run Semantic Release
        run: npx semantic-release --dry-run
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 6: Fetch the latest tags after the release
      - name: Fetch latest tags
        run: git fetch --tags

      # Step 7: Generate CHANGELOG
      - name: Generate CHANGELOG
        uses: orhun/git-cliff-action@v4
        id: git-cliff-changelog
        with:
          config: cliff.toml
        env:
          OUTPUT: CHANGELOG.md
          GITHUB_REPO: ${{ github.repository }}

      # Step 8: Generate CHANGES (for release)
      - name: Generate CHANGES for release
        uses: orhun/git-cliff-action@v4
        id: git-cliff-changes
        with:
          config: cliff.toml
          args: -vv --latest --strip header
        env:
          OUTPUT: CHANGES.md
          GITHUB_REPO: ${{ github.repository }}

      # Step 9: Upload the binary releases
      - name: Upload the binary releases
        uses: svenstaro/upload-release-action@v2
        with:
          file: binary_release.zip
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref }}
          body: ${{ steps.git-cliff-changes.outputs.content }}

      # Step 10: Commit the CHANGELOG after it is generated (only if there are changes)
      - name: Commit CHANGELOG
        id: commit-changelog
        run: |
          # Set up git configuration
          git config user.name 'github-actions[bot]'
          git config user.email 'actions@github.com'

          # Add generated CHANGELOG
          git add CHANGELOG.md

          # Check if there are any changes to commit
          if git diff --cached --quiet; then
            echo "No changes to commit, skipping commit."
            echo "::set-output name=skip_commit::true"
          else
            git commit -m "chore(pr): update CHANGELOG for PR #${{ github.event.pull_request.number }} [automated]"
            echo "::set-output name=skip_commit::false"
          fi

      # Step 11: Fetch and Rebase onto latest main before pushing
      - name: Fetch and Rebase onto latest main before push
        if: steps.commit-changelog.outputs.skip_commit == 'false'
        run: |
          echo "Fetching and rebasing onto the latest main branch before pushing..."
          git fetch origin
          git rebase origin/main -X ours

      # Step 12: Push changes
      - name: Push changes
        if: steps.commit-changelog.outputs.skip_commit == 'false'
        run: git push origin main
