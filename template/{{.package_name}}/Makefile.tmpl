.PHONY: install setup clean test deploy_% destroy_% repo module module_%

install:
	@which brew > /dev/null || (echo "Homebrew is not installed. Installing Homebrew..." && /bin/bash -c "$$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)")

	@echo "Installing required tools..."

	@if ! command -v databricks >/dev/null 2>&1; then \
		echo "Tapping databricks..."; \
		brew tap databricks/tap; \
		brew install databricks; \
	else \
		echo "Databricks is already installed. Skipping."; \
	fi

	@for tool in git poetry pyenv gh; do \
		if ! command -v $$tool >/dev/null 2>&1; then \
			echo "Installing $$tool..."; \
			brew install $$tool; \
		else \
			echo "$$tool is already installed. Skipping."; \
		fi; \
	done

	@echo "Adding pyenv configuration to .zprofile (environment variables for login shells)"
	@grep -q '# pyenv' ~/.zshrc || (printf '\n# pyenv configuration (added by `revo-asset-bundle-templates` on %s)\n' "$$(date +"%Y-%m-%d %H:%M:%S")" >> ~/.zshrc)
	@grep -q 'PYENV_ROOT' ~/.zshrc || (echo 'export PYENV_ROOT="$$HOME/.pyenv"' >> ~/.zshrc)
	@grep -q 'PYENV_ROOT/bin' ~/.zshrc || (echo '[[ -d $$PYENV_ROOT/bin ]] && export PATH="$$PYENV_ROOT/bin:$$PATH"' >> ~/.zshrc)
	@grep -q 'pyenv init' ~/.zshrc || (echo 'eval "$$(pyenv init -)"' >> ~/.zshrc)

	@echo "Adding pyenv configuration to .zshrc    (environment variables for interactive shells)"
	@grep -q '# pyenv' ~/.zprofile || (printf '\n# pyenv configuration (added by `revo-asset-bundle-templates` on %s)\n' "$$(date +"%Y-%m-%d %H:%M:%S")" >> ~/.zprofile)
	@grep -q 'PYENV_ROOT' ~/.zprofile || (echo 'export PYENV_ROOT="$$HOME/.pyenv"' >> ~/.zprofile)
	@grep -q 'PYENV_ROOT/bin' ~/.zprofile || (echo '[[ -d $$PYENV_ROOT/bin ]] && export PATH="$$PYENV_ROOT/bin:$$PATH"' >> ~/.zprofile)
	@grep -q 'pyenv init' ~/.zprofile || (echo 'eval "$$(pyenv init -)"' >> ~/.zprofile)

	@echo "All tools installed successfully."

setup:
	@echo "Please ensure you have the following tools installed and configured:"
	@echo "  - pyenv"
	@echo "  - git"
	@echo "  - gh (GitHub CLI)"
	@echo "  - poetry >= 1.6.1"
	@echo ""

	@for tool in pyenv git gh; do \
		@command -v $$tool >/dev/null 2>&1 || { echo >&2 "$$tool is not installed. Exiting."; exit 1; }
	done

	@if ! command -v poetry >/dev/null 2>&1; then \
		echo >&2 "Poetry is not installed. Exiting."; exit 1; \
	else \
		POETRY_VERSION=$$(poetry --version | cut -d' ' -f3); \
		REQUIRED_VERSION="1.6.1"; \
		if [ "$$(echo -e "$$POETRY_VERSION\n$$REQUIRED_VERSION" | sort -V | head -n1)" != "$$REQUIRED_VERSION" ]; then \
			echo >&2 "Poetry version $$POETRY_VERSION is less than required version $$REQUIRED_VERSION. Please upgrade it."; exit 1; \
		fi \
	fi

	@PYTHON_VERSION=$$(cat .python-version); \
	echo "Using Python version $$PYTHON_VERSION"; \
	pyenv install --skip-existing $$PYTHON_VERSION; \
	pyenv local $$PYTHON_VERSION; \
	which python; \
	python --version;

	curl -sSL https://install.python-poetry.org | python -; \
	poetry --version; \
	poetry config virtualenvs.in-project true --local; \
	poetry env use python $$PYTHON_VERSION; \
	poetry install;

	@if [ ! -d ".git" ]; then \
		git init > /dev/null; \
	fi

	. .venv/bin/activate;
	.venv/bin/pre-commit install;

clean:
	-@if command -v deactivate &> /dev/null; then \
		bash -c "source deactivate" || true; \
	fi
	rm -rf .venv
	rm -rf poetry.lock
	find . -name ".pytest_cache" -type d -exec rm -rf {} +
	find . -name ".mypy_cache" -type d -exec rm -rf {} +
	find . -name ".ruff_cache" -type d -exec rm -rf {} +

test:
	.venv/bin/pre-commit run --all-files
	poetry update
	poetry build
	poetry install --only-root
	pytest tests --cov=src  --cov-report html --cov-report term

deploy_%:
	@if [ "$*" != "dev" ] && [ "$*" != "acc" ] && [ "$*" != "prd" ]; then \
		echo "Error: Invalid environment. Use 'dev', 'acc', or 'prd'."; \
		exit 1; \
	fi
	.venv/bin/pre-commit run --all-files
	poetry update
	poetry build
	@PROFILE_NAME="{{.profile_name}}"; \
	output=$$(databricks auth env --profile "$$PROFILE_NAME" 2>&1); \
	if [[ $$output == *"Error: resolve:"* ]]; then \
		databricks configure --profile "$$PROFILE_NAME"; \
	else \
		databricks bundle deploy --profile "$$PROFILE_NAME" $$(if [ "$*" != "dev" ]; then echo "--target $*"; fi); \
	fi

destroy_%:
	@if [ "$*" != "dev" ] && [ "$*" != "acc" ] && [ "$*" != "prd" ]; then \
		echo "Error: Invalid environment. Use 'dev', 'acc', or 'prd'."; \
		exit 1; \
	fi
	@PROFILE_NAME="{{.profile_name}}"; \
	output=$$(databricks auth env --profile "$$PROFILE_NAME" 2>&1); \
	if [[ $$output == *"Error: resolve:"* ]]; then \
		databricks configure --profile "$$PROFILE_NAME"; \
	else \
		databricks bundle destroy --profile "$$PROFILE_NAME" --target $*; \
	fi

# Create a repository in RevoData's GitHub, and adds a remote to the local git repo
repo:
	# ANSI escape codes
	GREEN=\033[0;32m
	RESET=\033[0m
	@printf "$(GREEN)Creating repository in RevoData's GitHub...$(RESET)\n"
	@PROJECT_NAME=$$(grep 'name =' pyproject.toml | awk -F'"' '{print $$2}'); \
	REPO_DESCRIPTION=$$(grep 'description =' pyproject.toml | awk -F'"' '{print $$2}'); \
	if ! gh auth status >/dev/null 2>&1; then \
		echo "Error: GitHub CLI is not authenticated. Please run 'gh auth login' first."; \
		exit 1; \
	fi; \
	if ! gh repo view revodatanl/$$PROJECT_NAME > /dev/null 2>&1; then \
		gh repo create revodatanl/$$PROJECT_NAME -y --private -d "$$REPO_DESCRIPTION" > /dev/null 2>&1; \
		(git remote | grep origin || git remote add origin git@github.com:revodatanl/$$PROJECT_NAME.git) > /dev/null 2>&1; \
		printf "Repository created at revodatanl/$$PROJECT_NAME...$(RESET)\n"; \
		printf "$(GREEN)Publishing project...$(RESET)\n"; \
		printf "Repository published.\n"; \
	else \
		printf "Repository revodatanl/$$PROJECT_NAME already exists.\n"; \
	fi

# Add custom RevoData modules to the project
module:
	@echo "Select the module to deploy:"
	@echo "1) DLT"
	@echo "2) Azure DevOps"
	@echo "3) GitLab"
	@echo "4) VSCode settings (update)"
	@read -p "Enter the number of the module you want to deploy: " choice; \
	case $$choice in \
		1) $(MAKE) module_dlt;; \
		2) $(MAKE) module_azure-devops;; \
		3) $(MAKE) module_gitlab;; \
		4) $(MAKE) module_vscode;; \
		*) echo "Invalid choice. Exiting."; exit 1;; \
	esac

module_%:
	@if [ "$*" != "dlt" ] && [ "$*" != "azure-devops" ] && [ "$*" != "gitlab" ] && [ "$*" != "vscode" ]; then \
		echo "Error: Invalid module. Use 'dlt', 'azure-devops', 'gitlab', or 'vscode'."; \
		exit 1; \
	fi
	@{ \
	set -e; \
	trap 'if [ -f databricks.yml.bak ]; then mv databricks.yml.bak databricks.yml; fi' EXIT; \
	if [ -f databricks.yml ]; then mv databricks.yml databricks.yml.bak; fi; \
	if ! databricks bundle init https://github.com/revodatanl/revo-asset-bundle-templates --template-dir modules/$* 2>&1; then \
		echo "Exiting." >&2; \
	fi; \
	}
