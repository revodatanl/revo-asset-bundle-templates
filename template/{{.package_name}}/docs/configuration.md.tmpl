# Development Environment Configuration

## Overview

This document outlines the configuration settings and tools used to establish a robust and efficient development environment for our project.

## Python Version

Our project uses Python 3.10.12, which is specified in the `pyproject.toml` file, to match Databricks Runtime 14.3 LTS.

## Poetry for Dependency Management

Rather than a `requirements.txt` file, our project uses Poetry for managing dependencies, which is specified in the `pyproject.toml` file. This modern tool provides several advantages over the traditional methods, including:

- **Enhanced Dependency Resolution**: Poetry resolves and locks dependencies more effectively, reducing conflicts.
- **Environment Management**: Poetry creates and manages virtual environments automatically, ensuring consistency.
- **Project Metadata**: The `pyproject.toml` file includes project metadata, which improves project organization and documentation.

### `pyproject.toml` Configuration

#### Core Settings

- **Project Information**:

[tool.poetry]
classifiers = ["Programming Language :: Python :: 3.10.12", "Operating System :: OS Independent"]
packages = [{ include = "{{.package_name}}", from = "src" }]
scripts = { "main" = "{{.package_name}}.main:main" }

````toml
- **Dependencies**:

```toml
[tool.poetry.dependencies]
python = "3.10.12"
````

- **Dev Dependencies**:

```toml
[tool.poetry.dev-dependencies]
coverage = "^7.5.3"
mypy = "^1.9.0"
pytest = "^8.1.1"
ruff = "^0.3.5"
```

#### Build System

```toml
[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
```

## Pre-Commit Hooks

To maintain code quality and consistency, we utilize a set of pre-commit hooks defined in the `.pre-commit-config.yaml` file. These hooks run various checks and formatting tools before code is committed, ensuring that only well-formatted and lint-free code is pushed to the repository.

### Notable Hooks

1. **Update Pre-Commit Hooks**:

   - Ensures that pre-commit hooks are always up-to-date.

   - ```yaml
     - repo: https://gitlab.com/vojko.pribudic.foss/pre-commit-update
       rev: v0.3.2
       hooks:
         - id: pre-commit-update
           args: ["--verbose"]
     ```

2. **Basic Formatting and Linting**:

   - Removes trailing whitespace, fixes end-of-file issues, and checks YAML and JSON files.

   - ```yaml
     - repo: https://github.com/pre-commit/pre-commit-hooks
       rev: v4.6.0
       hooks:
         - id: trailing-whitespace
         - id: end-of-file-fixer
         - id: check-yaml
         - id: check-json
     ```

3. **Ruff for Linting and Formatting**:

   - Uses Ruff for linting and code formatting.

   - ```yaml
     - repo: https://github.com/charliermarsh/ruff-pre-commit
       rev: v0.4.8
       hooks:
         - id: ruff
           args: ["--config=pyproject.toml", "--fix", "--exit-non-zero-on-fix"]
           types_or: [python, pyi, jupyter]
         - id: ruff-format
           args: ["--config=pyproject.toml"]
           types_or: [python, pyi, jupyter]
     ```

4. **Mypy for Type Checking**:

   - Runs Mypy with strict settings for type checking.

   - ```yaml
     - repo: https://github.com/pre-commit/mirrors-mypy
       rev: v1.10.1
       hooks:
         - id: mypy
           args:
             [
               "--strict",
               "--allow-untyped-decorators",
               "--ignore-missing-imports",
               "--disable-error-code=name-defined",
             ]
           additional_dependencies:
             - pandas-stubs
             - pyspark-stubs
             - types-pytz
           exclude: scratch
     ```

   Note that a better way to configure this hook is to use the `pyproject.toml` configuration, however, this does not work with the current version of the hook.

5. **Pytest for Running Unit Tests**:

   - Executes unit tests and generates a coverage badge.

   - ```yaml
     - repo: local
       hooks:
         - id: pytest-unit-tests
           name: pytest-unit-tests
           entry: >
             bash -c '
               poetry run pytest -v tests --cov=src &&
               poetry run coverage-badge -f -o assets/coverage.svg
             '
           language: system
           pass_filenames: false
           stages: [commit]
     ```

By adhering to these configurations and tools, we ensure a consistent, high-quality, and efficient development process.

## Visual Studio Code Configuration

Our project leverages VSCode for development. The following settings ensure a consistent and efficient development experience.

### Notable VSCode Settings

1. **Environment Activation**:

   - The settings ensure that the Python environment is activated automatically in the terminal, enhancing the ease of environment management.
   - `"python.terminal.activateEnvironment": true`
   - `"python.terminal.activateEnvInCurrentTerminal": true`

2. **Environment Files**:

   - Specific `.env` files for Databricks integration are configured, facilitating seamless interaction with Databricks from VSCode.
   - `"databricks.python.envFile": "${workspaceFolder}/.env"`
   - `"python.envFile": "${workspaceFolder}/.databricks/.databricks.env"`

3. **Extra Paths and Stub Path**:

   - Additional paths for Python analysis are included, and a stub path is set for better code completion and analysis.
   - `"python.analysis.extraPaths": ["${workspaceFolder}"]`
   - `"python.analysis.stubPath": ".vscode"`

4. **Default Interpreter Path**:

   - The settings specify the default Python interpreter within a virtual environment, ensuring consistency across the development team.
   - `"python.defaultInterpreterPath": "${workspaceFolder}/.venv/bin/python"`

5. **Code Formatting and Linting**:
   - The configuration enforces code formatting on save using `ruff`, along with organizing imports, which maintains code quality and adherence to style guidelines.
   - `"editor.formatOnSave": true`
   - `"editor.codeActionsOnSave": {"source.fixAll": "explicit", "source.organizeImports": "explicit"}`
   - `"editor.defaultFormatter": "charliermarsh.ruff"`
