# Use the Databricks Runtime image as the base image.
FROM databricksruntime/standard:15.4-LTS

# Install system packages
RUN apt-get update && apt-get install -y \
    curl \
    git \
    make \
    nano \
    tree \
    zip{{if (eq .package_manager "uv")}} \
    ca-certificates{{end}}

# Set the default editor to nano
ENV EDITOR=nano

# Install the Databricks CLI
RUN curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh

# Ensure the Databricks Python is used by default
ENV PATH="/databricks/python3/bin:$PATH"

{{if (eq .package_manager "poetry")}}# Install Poetry
RUN curl -sSL https://install.python-poetry.org | python - \
    && ln -s /root/.local/bin/poetry /usr/local/bin/poetry

# Configure Poetry to use the Databricks Python environment
ENV POETRY_VIRTUALENVS_CREATE=false{{end}}
{{if (eq .package_manager "uv")}}# Download uv installer
ADD https://astral.sh/uv/install.sh /uv-installer.sh

# Run the installer then remove it
RUN sh /uv-installer.sh && rm /uv-installer.sh

# Ensure the installed binary is on the PATH
ENV PATH="/root/.local/bin/:$PATH"

# Configure uv to use the Databricks Python environment
ENV VIRTUAL_ENV="/databricks/python3"
ENV UV_SYSTEM_PYTHON=true
ENV UV_PYTHON="/databricks/python3/bin/python"{{end}}

# Set the working directory
WORKDIR /workspace/

# Copy repo files to temporary directory to install dependencies (remove afterward)
COPY . /tmp/code
RUN cd /tmp/code && make setup && rm -rf /tmp/code

# Clean all caches and temporary files
RUN rm -rf /var/lib/apt/lists/* \
    && rm -rf ~/.cache/pre-commit \
    {{if (eq .package_manager "uv")}}&& rm -rf ~/.cache/uv{{end}}{{if (eq .package_manager "poetry")}}&& rm -rf ~/.cache/pypoetry{{end}} \
    && rm -rf ~/.cache/pip \
    && rm -rf /root/.cache/* \
    && find /databricks/python3 -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true \
    && find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true \
    && rm -rf /tmp/* \
    && apt-get clean

# Copy entrypoint script into the container
COPY .devcontainer/entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

# Use entrypoint script to install dependencies
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]

# Keep the container running
CMD ["tail", "-f", "/dev/null"]
