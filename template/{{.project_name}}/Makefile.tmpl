.PHONY: install setup clean test deploy_% destroy_% repo module module_% tree docs

install:
	@echo "Verifying if Homebrew is installed..."
	@which brew > /dev/null || (echo "Homebrew is not installed. Installing Homebrew..." && /bin/bash -c "$$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)")

	@echo "Installing required tools..."
	@if ! command -v databricks >/dev/null 2>&1; then \
		echo "Tapping databricks..."; \
		brew tap databricks/tap; \
		brew install databricks; \
	else \
		echo "Databricks CLI is already installed. Skipping."; \
	fi
	@for tool in git poetry pyenv; do \
		if ! command -v $$tool >/dev/null 2>&1; then \
			echo "Installing $$tool..."; \
			brew install $$tool; \
		else \
			echo "$$tool is already installed. Skipping."; \
		fi; \
	done

	@PYTHON_VERSION=$$(cat .python-version); \
	echo "Setting up Python version $$PYTHON_VERSION"; \
	pyenv install --skip-existing $$PYTHON_VERSION; \
	pyenv local $$PYTHON_VERSION; \

	@if ! grep -q '# pyenv configuration' ~/.zshrc; then \
		echo "Adding pyenv configuration to .zshrc (for interactive shells)..."; \
		printf '\n# pyenv configuration (added on %s)\n' "$$(date +"%Y-%m-%d %H:%M:%S")" >> ~/.zshrc; \
		echo 'export PYENV_ROOT="$$HOME/.pyenv"' >> ~/.zshrc; \
		echo '[[ -d $$PYENV_ROOT/bin ]] && export PATH="$$PYENV_ROOT/bin:$$PATH"' >> ~/.zshrc; \
		echo 'eval "$$(pyenv init -)"' >> ~/.zshrc; \
	else \
		echo "Pyenv configuration already exists in .zshrc. Skipping."; \
	fi

	@if ! grep -q '# pyenv configuration' ~/.zprofile; then \
		echo "Adding pyenv configuration to .zprofile (for login shells)..."; \
		printf '\n# pyenv configuration (added on %s)\n' "$$(date +"%Y-%m-%d %H:%M:%S")" >> ~/.zprofile; \
		echo 'export PYENV_ROOT="$$HOME/.pyenv"' >> ~/.zprofile; \
		echo '[[ -d $$PYENV_ROOT/bin ]] && export PATH="$$PYENV_ROOT/bin:$$PATH"' >> ~/.zprofile; \
		echo 'eval "$$(pyenv init --path)"' >> ~/.zprofile; \
	else \
		echo "Pyenv configuration already exists in .zprofile. Skipping."; \
	fi

	@echo "Restarting the terminal..."
	@exec zsh -c "source ~/.zshrc"

	@echo "All tools installed successfully."

setup:
	@echo "Setting up the project..."
	@which python
	@python --version
	@poetry config virtualenvs.in-project true --local; \
	poetry env use python $$PYTHON_VERSION; \
	poetry install;
	poetry types update;

	@if [ ! -d ".git" ]; then \
		echo "Setting up git..."; \
		git init -b main > /dev/null; \
	fi

	@echo "Setting up pre-commit..."
	. .venv/bin/activate;
	.venv/bin/pre-commit install --hook-type pre-commit --hook-type commit-msg;

clean:
	@echo "Cleaning up..."
	rm -rf .venv poetry.lock
	find . -type d \
		\( -name ".pytest_cache" \
		-o -name ".mypy_cache" \
		-o -name ".ruff_cache" \
		-o -name "dist" \) \
		-exec rm -rf {} +
	@echo "Cleanup completed. Resetting terminal..."
	@reset

test:
	@echo "Running tests..."
	.venv/bin/pre-commit run --all-files
	poetry update
	poetry build
	poetry install --only-root
	poetry run pytest tests --cov=src --cov-report term

deploy_%:
	@if [ "$*" != "dev" ] && [ "$*" != "prd" ]; then \
		echo "Error: Invalid environment. Use 'dev' or 'prd'."; \
		exit 1; \
	fi
	.venv/bin/pre-commit run --all-files
	poetry update
	poetry build
	@PROFILE_NAME="{{.databrickscfg_profile_name}}"; \
	output=$$(databricks auth env --profile "$$PROFILE_NAME" 2>&1); \
	if [[ $$output == *"Error: resolve:"* ]]; then \
		databricks configure --profile "$$PROFILE_NAME"; \
	else \
		databricks bundle deploy --profile "$$PROFILE_NAME" $$(if [ "$*" != "dev" ]; then echo "--target $*"; fi); \
	fi

destroy_%:
	@if [ "$*" != "dev" ] && [ "$*" != "prd" ]; then \
		echo "Error: Invalid environment. Use 'dev'or 'prd'."; \
		exit 1; \
	fi
	@PROFILE_NAME="{{.databrickscfg_profile_name}}"; \
	output=$$(databricks auth env --profile "$$PROFILE_NAME" 2>&1); \
	if [[ $$output == *"Error: resolve:"* ]]; then \
		databricks configure --profile "$$PROFILE_NAME"; \
	else \
		databricks bundle destroy --profile "$$PROFILE_NAME" --target $*; \
	fi

# Create a repository in RevoData's GitHub, and adds a remote to the local git repo
repo:
	@printf "Creating repository in RevoData's GitHub...\n"
	@PROJECT_NAME=$$(grep 'name =' pyproject.toml | awk -F'"' '{print $$2}'); \
	REPO_DESCRIPTION=$$(grep 'description =' pyproject.toml | awk -F'"' '{print $$2}'); \
	if ! gh auth status >/dev/null 2>&1; then \
		echo "Error: GitHub CLI is not authenticated. Please run 'gh auth login' first."; \
		exit 1; \
	fi; \
	if ! gh repo view revodatanl/$$PROJECT_NAME > /dev/null 2>&1; then \
		gh repo create revodatanl/$$PROJECT_NAME -y --private -d "$$REPO_DESCRIPTION" > /dev/null 2>&1; \
		(git remote | grep origin || git remote add origin git@github.com:revodatanl/$$PROJECT_NAME.git) > /dev/null 2>&1; \
		printf "Repository created at revodatanl/$$PROJECT_NAME...\n"; \
		printf "Publishing project...\n"; \
		printf "Repository published.\n"; \
	else \
		printf "Repository revodatanl/$$PROJECT_NAME already exists.\n"; \
	fi

# Add custom RevoData modules to the project
module:
	@echo "Select the module to deploy:"
	@echo "1) DLT"
	@echo "2) Azure DevOps"
	@echo "3) GitHub"
	@echo "4) VSCode settings (update)"
	@read -p "Enter the number of the module you want to deploy: " choice; \
	case $$choice in \
		1) $(MAKE) module_dlt;; \
		2) $(MAKE) module_azure-devops;; \
		3) $(MAKE) module_github;; \
		4) $(MAKE) module_vscode;; \
		*) echo "Invalid choice. Exiting."; exit 1;; \
	esac

module_%:
	@if [ "$*" != "dlt" ] && [ "$*" != "azure-devops" ] && [ "$*" != "github" ] && [ "$*" != "vscode" ]; then \
		echo "Error: Invalid module. Use 'dlt', 'azure-devops', 'github', or 'vscode'."; \
		exit 1; \
	fi
	@{ \
	set -e; \
	trap 'if [ -f databricks.yml.bak ]; then mv databricks.yml.bak databricks.yml; fi' EXIT; \
	if [ -f databricks.yml ]; then mv databricks.yml databricks.yml.bak; fi; \
	if ! databricks bundle init https://github.com/revodatanl/revo-asset-bundle-templates --template-dir modules/$* 2>&1; then \
		echo "Exiting." >&2; \
	fi; \
	}

tree:
	@echo "Generating project tree..."
	@tree -I '.venv|__pycache__|archive|scratch|.databricks|.ruff_cache|.mypy_cache|.pytest_cache|.git|htmlcov|site|dist|.DS_Store|fixtures' -a

docs:
	@echo "Running tests and generating badges..."
	@poetry run pytest -v tests --cov=src --cov-report html:docs/tests/coverage --junitxml=docs/tests/coverage/pytest_coverage.xml
	@poetry run coverage xml -o docs/tests/coverage/coverage.xml
	@poetry run genbadge coverage -i docs/tests/coverage/coverage.xml -o docs/assets/badge-coverage.svg
	@poetry run genbadge tests -i docs/tests/coverage/pytest_coverage.xml -o docs/assets/badge-tests.svg
	@rm -rf docs/tests/coverage/.gitignore
	@echo "Generating HTML documentation..."
	@poetry run pdoc --html src/{{.package_name}} -o docs/api --force
	@poetry run pdoc --html tests -o docs/api --force
	# @poetry run mkdocs build
	@poetry run mkdocs serve
