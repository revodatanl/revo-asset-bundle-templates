.PHONY: install setup clean test validate deploy destroy tree docs lint

.DEFAULT_GOAL := setup

SHELL := /bin/bash

PROFILE_NAME := DEFAULT  # .databrickscfg profile name
{{if (eq .use_devcontainer "no")}}
install:
	@CURRENT_OS=$$(uname -s); \
	echo "Current OS: $$CURRENT_OS"; \
	if [ "$$CURRENT_OS" = "Darwin" ]; then \
		echo "Verifying if Homebrew is installed..."; \
		which brew > /dev/null || (echo "Homebrew is not installed. Installing Homebrew..." && /bin/bash -c "$$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"); \
		echo "Installing tools..."; \
		for tool in git uv tree; do \
			if ! command -v $$tool >/dev/null 2>&1; then \
				echo "Installing $$tool..."; \
				brew install $$tool; \
			else \
				echo "$$tool is already installed. Skipping."; \
			fi; \
		done; \
	elif [ "$$CURRENT_OS" = "Linux" ]; then \
		echo "Installing tools..."; \
		sudo apt update; \
		for tool in git tree; do \
			if ! command -v $$tool >/dev/null 2>&1; then \
				echo "Installing $$tool..."; \
				 sudo apt install -y $$tool; \
			else \
				echo "$$tool is already installed. Skipping."; \
			fi; \
		done; \
		if ! command -v uv >/dev/null 2>&1; then \
			echo "Installing uv..."; \
			curl -LsSf https://astral.sh/uv/install.sh | sh; \
			echo "Sourcing ~/.bashrc to update shell environment..."; \
			source ~/.bashrc || true; \
		else \
			echo "uv is already installed. Skipping."; \
		fi; \
	else \
		echo "Unsupported OS. Currently supported kernels are either Darwin (macOS) or Linux (ubuntu22.04)."; \
		exit 1; \
	fi; \
	echo "All tools installed successfully."

setup:
	@echo "Installing tools..."
	@{ \
		output=$$($(MAKE) install 2>&1); \
		exit_code=$$?; \
		if [ $$exit_code -ne 0 ]; then \
			echo "$$output"; \
			exit $$exit_code; \
		fi; \
	}
	@echo "All tools installed successfully."

	@echo "Setting up the project..."
	@uv lock;
	@uv sync;

	@if [ ! -d ".git" ]; then \
		echo "Setting up git..."; \
		git init -b main > /dev/null; \
	fi

	@echo "Setting up pre-commit..."
	@uv run pre-commit autoupdate || true
	@uv run pre-commit install --hook-type pre-commit --hook-type commit-msg

	@echo "Setup completed successfully!"
{{end}}
{{if (eq .use_devcontainer "yes")}}
build: setup
	@echo "Updating pre-commit hooks..."
	@uv run pre-commit autoupdate || true
	@if git diff --name-only | grep -q ".pre-commit-config.yaml"; then \
		echo "Committing pre-commit config updates..."; \
		git add .pre-commit-config.yaml; \
		git config --get user.name > /dev/null 2>&1 || git config --local user.name "Setup Script"; \
		git config --get user.email > /dev/null 2>&1 || git config --local user.email "setup@example.com"; \
		git commit -m "chore: update pre-commit hooks" || true; \
	fi
	@echo "Installing pre-commit environments..."
	@uv run pre-commit install-hooks

	@echo "Running pre-commit..."
	@uv run pre-commit run --all-files

	@echo "Build completed successfully!"

setup:
	@echo "Setting up the project..."
	@uv lock;
	@uv sync --inexact;

	@if [ ! -d ".git" ]; then \
		echo "Setting up git..."; \
		git init -b main > /dev/null; \
	fi

	@echo "Setting up pre-commit..."
	@uv run pre-commit install --hook-type pre-commit --hook-type commit-msg

	@echo "Setup completed successfully!"
{{end}}
clean:
	@echo "Uninstalling local packages..."
	@rm -rf uv.lock
	@echo -e "Cleaning up project artifacts..."
	@find . \( \
		-name "__pycache__" -o \
		-name ".ipynb_checkpoints" -o \
		-name ".mypy_cache" -o \
		-name ".pytest_cache" -o \
		-name ".ruff_cache" -o \
		-name ".venv" -o \
		-name "dist" -o \
		-name "site" -o \
		-name "*.egg-info" \) \
		-type d -exec rm -rf {} + 2>/dev/null || true
	@find . -name ".coverage" -type f -delete 2>/dev/null || true
	@echo "Rebuilding the project..."
	@uv sync{{if (eq .use_devcontainer "yes")}} --inexact{{end}}
	@echo "Cleanup completed."

test:
	@echo "Running tests..."
	@uv run pre-commit run --all-files
	@echo "Building the project..."
	@uv build > /dev/null 2>&1
	@echo "Syncing the project..."
	@uv sync{{if (eq .use_devcontainer "yes")}} --inexact{{end}}
	@echo "Running tests..."
	@uv run pytest -v tests --cov=src --cov-report=term

validate:
	@echo "Validating resources..."
	@uv run pre-commit run --all-files
	@output=$$(databricks auth env --profile $(PROFILE_NAME) 2>&1); \
	if [[ $$output == *"Error: resolve:"* ]]; then \
		databricks configure --profile $(PROFILE_NAME); \
	else \
		databricks bundle validate --profile $(PROFILE_NAME) --target dev; \
	fi

deploy:
	@echo "Deploying resources..."
	@uv run pre-commit run --all-files
	@output=$$(databricks auth env --profile $(PROFILE_NAME) 2>&1); \
	if [[ $$output == *"Error: resolve:"* ]]; then \
		databricks configure --profile $(PROFILE_NAME); \
	else \
		databricks bundle deploy --profile $(PROFILE_NAME) --target dev; \
	fi

destroy:
	@echo "Destroying resources..."
	@output=$$(databricks auth env --profile $(PROFILE_NAME) 2>&1); \
	if [[ $$output == *"Error: resolve:"* ]]; then \
		databricks configure --profile $(PROFILE_NAME); \
	else \
		databricks bundle destroy --profile $(PROFILE_NAME) --target dev; \
	fi

tree:
	@echo "Generating project tree..."
	@tree -I '.venv|__pycache__|archive|scratch|.databricks|.ruff_cache|.mypy_cache|.pytest_cache|.git|htmlcov|site|dist|.DS_Store|fixtures' -a

docs:
	@echo "Generating HTML documentation..."
	@uv run mkdocs serve

lint:
	@echo "Linting the project..."
	@uv sync{{if (eq .use_devcontainer "yes")}} --inexact{{end}}
	@echo "Building the project..."
	@uv build > /dev/null 2>&1
	@echo "Running ruff..."
	@uv run ruff check --output-format=concise .
	@echo "Running mypy..."
	@uv run mypy .
	@echo "Running pydoclint..."
	@uv run pydoclint .
	@echo "Running bandit..."
	@uv run bandit --configfile=pyproject.toml --severity-level=medium -r .
	@echo "Linting completed successfully!"
