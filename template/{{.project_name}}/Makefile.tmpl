.PHONY: install setup clean test{{if not (eq .python_only "yes")}} deploy destroy{{end}} tree docs

.DEFAULT_GOAL := setup

SHELL := /bin/bash

PROFILE_NAME := "DEFAULT"

{{if not (eq .use_devcontainer "yes")}}install:
	{{if (eq .package_manager "uv")}}@CURRENT_OS=$$(uname -s); \
	echo "Current OS: $$CURRENT_OS"; \
	if [ "$$CURRENT_OS" = "Darwin" ]; then \
		echo "Verifying if Homebrew is installed..."; \
		which brew > /dev/null || (echo "Homebrew is not installed. Installing Homebrew..." && /bin/bash -c "$$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"); \
		echo "Installing tools..."; \
		for tool in git uv; do \
			if ! command -v $$tool >/dev/null 2>&1; then \
				echo "Installing $$tool..."; \
				brew install $$tool; \
			else \
				echo "$$tool is already installed. Skipping."; \
			fi; \
		done; \
	elif [ "$$CURRENT_OS" = "Linux" ]; then \
		echo "Installing tools..."; \
		if ! command -v git >/dev/null 2>&1; then \
				echo "Installing git..."; \
				sudo apt update && sudo apt install -y git; \
			else \
				echo "git is already installed. Skipping."; \
			fi; \
		if ! command -v uv >/dev/null 2>&1; then \
			echo "Installing uv..."; \
			curl -LsSf https://astral.sh/uv/install.sh | sh; \
			echo "Sourcing ~/.bashrc to update shell environment..."; \
			source ~/.bashrc || true; \
			echo "Continuing even if sourcing ~/.bashrc failed..."; \
		else \
			echo "uv is already installed. Skipping."; \
		fi; \
	else \
		echo "Unsupported OS. Currently supported kernels are either Darwin (macOS) or Linux (ubuntu22.04)."; \
		exit 1; \
	fi; \

	echo "Setting up Python..."; \
	uv python install || true; \
	echo "All tools installed successfully."{{end}}{{if (eq .package_manager "poetry")}}@echo "Verifying if Homebrew is installed..."
	@which brew > /dev/null || (echo "Homebrew is not installed. Installing Homebrew..." && /bin/bash -c "$$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)")
	{{if not (eq .python_only "yes")}}@echo "Installing required tools..."
	@if ! command -v databricks >/dev/null 2>&1; then \
		echo "Tapping databricks..."; \
		brew tap databricks/tap; \
		brew install databricks; \
	else \
		echo "Databricks CLI is already installed. Skipping."; \
	fi{{end}}
	@for tool in git poetry pyenv; do \
		if ! command -v $$tool >/dev/null 2>&1; then \
			echo "Installing $$tool..."; \
			brew install $$tool; \
		else \
			echo "$$tool is already installed. Skipping."; \
		fi; \
	done

	@PYTHON_VERSION=$$(cat .python-version); \
	echo "Setting up Python version $$PYTHON_VERSION"; \
	pyenv install --skip-existing $$PYTHON_VERSION; \
	pyenv local $$PYTHON_VERSION

	@if ! grep -q '# pyenv configuration' ~/.zshrc; then \
		echo "Adding pyenv configuration to .zshrc (for interactive shells)..."; \
		printf '\n# pyenv configuration (added on %s)\n' "$$(date +"%Y-%m-%d %H:%M:%S")" >> ~/.zshrc; \
		echo 'export PYENV_ROOT="$$HOME/.pyenv"' >> ~/.zshrc; \
		echo '[[ -d $$PYENV_ROOT/bin ]] && export PATH="$$PYENV_ROOT/bin:$$PATH"' >> ~/.zshrc; \
		echo 'eval "$$(pyenv init -)"' >> ~/.zshrc; \
	else \
		echo "Pyenv configuration already exists in .zshrc. Skipping."; \
	fi

	@if ! grep -q '# pyenv configuration' ~/.zprofile; then \
		echo "Adding pyenv configuration to .zprofile (for login shells)..."; \
		printf '\n# pyenv configuration (added on %s)\n' "$$(date +"%Y-%m-%d %H:%M:%S")" >> ~/.zprofile; \
		echo 'export PYENV_ROOT="$$HOME/.pyenv"' >> ~/.zprofile; \
		echo '[[ -d $$PYENV_ROOT/bin ]] && export PATH="$$PYENV_ROOT/bin:$$PATH"' >> ~/.zprofile; \
		echo 'eval "$$(pyenv init --path)"' >> ~/.zprofile; \
	else \
		echo "Pyenv configuration already exists in .zprofile. Skipping."; \
	fi

	@echo "Resetting the terminal..."
	@exec zsh -c "source ~/.zshrc"

	@echo "All tools installed successfully."{{end}}{{end}}

setup:
	{{if not (eq .use_devcontainer "yes")}}@echo "Installing tools..."
	@{ \
		output=$$($(MAKE) install 2>&1); \
		exit_code=$$?; \
		if [ $$exit_code -ne 0 ]; then \
			echo "$$output"; \
			exit $$exit_code; \
		fi; \
	}
	@echo "All tools installed successfully."{{end}}
	@echo "Setting up the project..."
	{{if (eq .use_devcontainer "yes")}}@command -v python > /dev/null || (echo "Python not found"; exit 1)
	@python --version
	@echo "Installing dependencies..."
	@{{if (eq .package_manager "uv")}}uv{{end}}{{if (eq .package_manager "poetry")}}poetry{{end}} lock
	@{{if (eq .package_manager "uv")}}uv sync{{if (eq .use_devcontainer "yes")}} --active{{end}}{{end}}{{if (eq .package_manager "poetry")}}poetry install{{end}}

	@if [ ! -d ".git" ]; then \
		echo "Setting up git..."; \
		git init -b main > /dev/null; \
	fi

	@echo "Setting up pre-commit..."
	@pre-commit install --hook-type pre-commit --hook-type commit-msg

	@echo "Updating pre-commit hooks..."
	@pre-commit autoupdate || true

	@if git diff --name-only | grep -q ".pre-commit-config.yaml"; then \
		echo "Committing pre-commit config updates..."; \
		git add .pre-commit-config.yaml; \
		git config --get user.name > /dev/null 2>&1 || git config --local user.name "Setup Script"; \
		git config --get user.email > /dev/null 2>&1 || git config --local user.email "setup@example.com"; \
		git commit -m "chore: update pre-commit hooks" || true; \
	fi

	@echo "Installing pre-commit environments..."
	@pre-commit install-hooks

	@echo "Running pre-commit..."
	@pre-commit run --all-files
	{{else}}
	{{if (eq .package_manager "poetry")}}@which python
	@python --version
	@poetry config virtualenvs.in-project true --local; \
	poetry env use python $$PYTHON_VERSION; \
	poetry install;{{end}}{{if (eq .package_manager "uv")}}@uv sync;{{end}}

	@if [ ! -d ".git" ]; then \
		echo "Setting up git..."; \
		git init -b main > /dev/null; \
	fi

	@echo "Setting up pre-commit..."
	@. .venv/bin/activate
	@.venv/bin/pre-commit install --hook-type pre-commit --hook-type commit-msg
	{{end}}
	@echo "Setup completed successfully!"

clean:
	@echo "Uninstalling local packages..."
	@rm -rf {{if (eq .package_manager "poetry")}}poetry.lock{{end}}{{if (eq .package_manager "uv")}}uv.lock{{end}}
	@{{if (eq .package_manager "poetry")}}poetry env remove --all || true{{end}}
	@{{if (eq .package_manager "poetry")}}poetry install --no-root{{end}}{{if (eq .package_manager "uv")}}uv sync{{if (eq .use_devcontainer "yes")}} --active{{end}}{{end}}

	@echo -e "Cleaning up project artifacts..."
	@find . \( \
		-name ".pytest_cache" -o \
		-name ".mypy_cache" -o \
		-name ".ruff_cache" -o \
		-name "dist" -o \
		-name "__pycache__" -o \
		-name ".ipynb_checkpoints" \) \
		-type d -exec rm -rf {} + 2>/dev/null || true
	@find . -name ".coverage" -type f -delete 2>/dev/null || true

	@echo "Cleanup completed."
	{{if not (eq .use_devcontainer "yes")}}@reset{{end}}

test:
	@echo "Running tests..."
	{{if not (eq .use_devcontainer "yes")}}@. .venv/bin/activate{{end}}
	{{if (eq .package_manager "poetry")}}@poetry update{{end}}
	@{{if (eq .package_manager "uv")}}uv{{end}}{{if (eq .package_manager "poetry")}}poetry{{end}} build
	@{{if (eq .package_manager "uv")}}uv sync{{if (eq .use_devcontainer "yes")}} --active{{end}}{{end}}{{if (eq .package_manager "poetry")}}poetry install --only-root{{end}}
	@{{if (eq .package_manager "uv")}}uv run{{if (eq .use_devcontainer "yes")}} --active{{end}}{{end}}{{if (eq .package_manager "poetry")}}poetry run{{end}} pytest -v tests --cov=src --cov-report=term

{{if not (eq .python_only "yes")}}deploy:
	@pre-commit run --all-files
	{{if (eq .package_manager "poetry")}}@poetry update{{end}}
	@{{if (eq .package_manager "uv")}}uv{{end}}{{if (eq .package_manager "poetry")}}poetry{{end}} build
	@output=$$(databricks auth env --profile "$(PROFILE_NAME)" 2>&1); \
	if [[ $$output == *"Error: resolve:"* ]]; then \
		databricks configure --profile "$(PROFILE_NAME)"; \
	else \
		databricks bundle deploy --profile "$(PROFILE_NAME)" --target dev; \
	fi

destroy:
	@output=$$(databricks auth env --profile "$(PROFILE_NAME)" 2>&1); \
	if [[ $$output == *"Error: resolve:"* ]]; then \
		databricks configure --profile "$(PROFILE_NAME)"; \
	else \
		databricks bundle destroy --profile "$(PROFILE_NAME)" --target dev; \
	fi
{{end}}

tree:
	@echo "Generating project tree..."
	@tree -I '.venv|__pycache__|archive|scratch|.databricks|.ruff_cache|.mypy_cache|.pytest_cache|.git|htmlcov|site|dist|.DS_Store|fixtures' -a

docs:
	@echo "Generating HTML documentation..."
	@. .venv/bin/activate{{end}}
	# @{{if (eq .package_manager "uv")}}uv{{if (eq .use_devcontainer "yes")}} --active{{end}}{{end}}{{if (eq .package_manager "poetry")}}poetry{{end}} run pdoc --html src/{{.package_name}} -o docs/api --force
	# @{{if (eq .package_manager "uv")}}uv{{if (eq .use_devcontainer "yes")}} --active{{end}}{{end}}{{if (eq .package_manager "poetry")}}poetry{{end}} run pdoc --html tests -o docs/api --force
	@{{if (eq .package_manager "uv")}}uv{{if (eq .use_devcontainer "yes")}} --active{{end}}{{end}}{{if (eq .package_manager "poetry")}}poetry{{end}} run mkdocs serve
