# Coding Standards

## Style Guide

- Follow `PEP 8` for Python code style.
- Use type hints for function signatures.
- Preferably use functions over classes, unless you have a good reason to use classes (e.g. test classes).
- Write docstrings for all functions and classes, following the `numpy` style.
- Make sure that your functions have clear inputs and outputs, are testable, and are are well-documented.
- Use `.py` files rather than `ipynb` files for notebooks (easier to review).
- Consistency within a module/pipeline is most important.

## Code Quality

We ensure code quality by running pre-commit hooks and a CI pipeline.

### Pre-commit Hooks

Ensure that the [`pre-commit`](https://pre-commit.com) hook defined in `.pre-commit-config.yaml` passes successfully:

- [`conventional-pre-commit`](https://github.com/compilerla/conventional-pre-commit) to enforce conventional commit standards.
- [`ruff`](https://docs.astral.sh/ruff/) for linting and formatting.
- [`mypy`](https://mypy.readthedocs.io/en/stable/) for static type checking (in `strict` mode)
- [`pydoclint`](https://github.com/shmsi/pydoclint) to lint docstrings.

### CI Pipeline

This `CI` pipeline is triggered upon a pull request to any branch. It runs continuous integration tasks: setting up the environment, installing dependencies, running formatting checks with `ruff`, `mypy`, and `pydoclint`, executing unit tests with coverage reporting, and finally building and validating the package to ensure consistency between source and built files.

The pipeline configuration can be found here: {{if (eq .cicd_provider "azure")}}`.azuredevops/.azure-pipelines/ci.yml`{{end}}{{if (eq .cicd_provider "github")}}`.github/workflows/ci.yml`{{end}}`.

{{if (eq .cicd_provider "github")}}### Dependabot

We use GitHub's Dependabot to automatically check for updates to GitHub Actions and Python dependencies. It performs daily checks and groups dependencies as follows:

- **GitHub Actions**: All dependencies within GitHub Actions are monitored and updated daily.
- **Python Dependencies**:
  - **Development Dependencies**: Development-specific dependencies are updated daily.
  - **Production Dependencies**: Production-specific dependencies are also checked daily.

This ensures dependencies are regularly maintained while adhering to the fixed environment constraints.{{end}}

## Testing

To run a full test suite, run the `make test` command.

- Tests are located in the `tests` directory
- All tests have a leading `test_` (or `_test` suffix) to the function and/or class - following the [`pytest`](https://docs.pytest.org/en/stable/) convention
- We aim for at least 80% test coverage, quantified by [`pytest-cov`](https://pytest-cov.readthedocs.io/en/latest/)

## Commit Conventions

We write our commit messages following the [Conventional Commits](https://www.conventionalcommits.org) standard, and follow the [Angular Commit Message Conventions](https://github.com/angular/angular/blob/main/CONTRIBUTING.md#-commit-message-format).

### Commit Message Format

Each commit message consists of a **header**, an optional **body**, and an optional **footer**. The header has a special format that includes a **type**, an optional **scope**, and a **subject**:

```text
<type>(<scope>): <subject>
<BLANK LINE>
<body>
<BLANK LINE>
<footer>
```

#### Type

The type must be one of the following:

| Type       | Description | Version Impact |
|------------|-------------|----------------|
| `feat`     | A new feature | Minor (`1.0.0` → `1.1.0`) |
| `fix`      | A bug fix | Patch (`1.0.0` → `1.0.1`) |
| `docs`     | Documentation only changes | None |
| `style`    | Changes that do not affect the meaning of the code (white-space, formatting, etc.) | None |
| `refactor` | A code change that neither fixes a bug nor adds a feature | None |
| `perf`     | A code change that improves performance | None |
| `test`     | Adding missing tests or correcting existing tests | None |
| `build`    | Changes that affect the build system or external dependencies | None |
| `ci`       | Changes to our CI configuration files and scripts | None |
| `chore`    | Other changes that don't modify src or test files | None |
| `revert`   | Reverts a previous commit | Depends on the reverted commit |

#### Scope

The scope is optional and should specify the place of the commit change (e.g., component or file name).

#### Subject

The subject contains a succinct description of the change:

- Use the imperative, present tense: "change" not "changed" or "changes"
- Do not capitalize the first letter
- Do not end with a period (.)

#### Breaking Changes

Breaking changes should be indicated by:

1. Adding an exclamation mark after the type/scope: `feat!: introduce breaking change`
2. Adding a `BREAKING CHANGE:` footer with description: `BREAKING CHANGE: environment variables now take precedence over config files`

## Semantic Release

Our releases are automatically tagged by following [Semantic Versioning](https://semver.org). This tool ensures that versioning, changelog generation, and package publishing are handled consistently and efficiently. It analyzes commit messages to determine the next version number:

| Commit Type                               | Description                                     | Example                     |
|-------------------------------------------|-------------------------------------------------|-----------------------------|
| `fix:`                                    | triggers a **patch** version update             | `1.0.0` --> `1.0.1`         |
| `feat:`                                   | triggers a **minor** version update             | `1.0.0` --> `1.1.0`         |
| `*!:`                                     | triggers a **major** version update             | `1.0.0` --> `2.0.0`         |

The appropriate version number is then automatically updated in the repository.

### Automated `CHANGELOG` Generation

As part of the release process, we auto-generate a comprehensive `CHANGELOG`. The `CHANGELOG` is automatically updated with each release, capturing all notable changes, enhancements, bug fixes, and breaking changes based on the commit messages.
