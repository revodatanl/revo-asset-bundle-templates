# List of `make` Commands

## `install`

This command verifies the presence of necessary tools and installs them if they are not already installed. The tools include:

- `Homebrew`
- `Databricks CLI`
- `git`
- `Poetry`
- `pyenv`

The command also sets up the required Python version (specified in the `.python-version` file) using `pyenv` and updates the shell configuration files (`.zprofile` and `.zshrc`) for `pyenv` compatibility.

<details>
  <summary>Usage</summary>

```bash
make install
```

</details>

## `setup`

This command sets up the project development environment by configuring `Poetry`, initializing `git` (if required), and installing `pre-commit` hooks.

<details>
  <summary>Usage</summary>

```bash
make setup
```

</details>

## `clean`

This command cleans up the project development environment by removing the virtual environment, cache files, and resetting the terminal.

<details>
  <summary>Usage</summary>

```bash
make clean
```

</details>

## `test`

This command first updates Poetry dependencies and builds the package. Then, it runs a full test suite using `pytest`, generating a coverage report, for all the source code.

<details>
  <summary>Usage</summary>

```bash
make test
```

</details>

## `deploy_%`

This command deploys the bundle to a target Databricks Workspace environment. The supported environments are `dev` and `prd`.

<details>
  <summary>Usage</summary>

```bash
make deploy_dev
make deploy_prd
```

</details>

## `destroy_%`

This command destroys the deployed bundle in a target Databricks Workspace environment. The supported environments are `dev` and `prd`.

<details>
  <summary>Usage</summary>

```bash
make destroy_dev
make destroy_prd
```

</details>

## `repo`

This command creates a repository in RevoData's GitHub and sets it up as a remote for the local Git repository. This command requires that the GitHub CLI (`gh`) is installed and authenticated.

**Usage:**

```sh
make repo
```

<details>
  <summary>Usage</summary>

```bash
make repo
```

</details>

## `module`

This command provides a selection menu to deploy various custom RevoData modules. The available modules include:

- DLT
- Azure DevOps
- GitLab
- VSCode settings

<details>
  <summary>Usage</summary>

```bash
make module
```

```bash
Select the module to deploy:
1) DLT
2) Azure DevOps
3) GitLab
4) VSCode settings (update)
Enter the number of the module you want to deploy: 1

Your DLT ingestion pipeline, part of the 'ingest_dataset_using_dlt' workflow, has been added to the 'resources' directory.
```

</details>
## `tree`

This command generates a tree view of the project directory, excluding certain directories and files like `.venv`, `__pycache__`, and `.git`.

<details>
  <summary>Usage</summary>

```bash
make tree
```

</details>

## `docs`

Our project used `MkDocs` to generate comprehensive HTML documentation from markdown files in the `docs` directory. In addition, we use `pdoc3` to auto-generate HTML documentation (from doctrings) of modules and tests. Embedded in the documentation is the coverage report generated by `pytest-cov`. Lastly, we use `mkdocs-material` to enhance the visual appearance of the documentation.

To generate documentation, run the following command:

<details>
  <summary>Usage</summary>

```bash
make docs
```

```bash
Generating HTML documentation...
docs/api/{{.package_name}}/index.html
docs/api/{{.package_name}}/main.html
docs/api/tests/index.html
docs/api/tests/default_test.html
Generating coverage report...
INFO    -  Cleaning site directory
INFO    -  Building documentation to directory: ./site
INFO    -  Documentation built in 0.24 seconds
INFO    -  Building documentation...
INFO    -  Cleaning site directory
INFO    -  Documentation built in 0.21 seconds
INFO    -  [14:20:30] Watching paths for changes: 'docs', 'mkdocs.yml'
INFO    -  [14:20:30] Serving on http://127.0.0.1:8000/
```

</details>
