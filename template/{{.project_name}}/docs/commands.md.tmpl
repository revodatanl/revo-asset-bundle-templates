# List of `make` Commands

## `install`

This command verifies the presence of necessary tools and installs them if they are not already installed. The tools include:

- `Homebrew`{{if not (eq .python_only "yes")}}
- `Databricks CLI`{{end}}
- `git`
{{if (eq .package_manager "poetry")}}- `Poetry`
- `pyenv`{{end}}
{{if (eq .package_manager "uv")}}- `uv`{{end}}

{{if (eq .package_manager "poetry")}}The command also sets up the required Python version (specified in the `.python-version` file) using `pyenv` and, if needed, updates the shell configuration files (`.zprofile` and `.zshrc`) for `pyenv` compatibility.{{end}}
{{if (eq .package_manager "uv")}}The command also sets up the required Python version (specified in the `.python-version` file) using `uv`.{{end}}

<details>
  <summary>Usage</summary>

```bash
make install
```

```bash
Verifying if Homebrew is installed...
Installing required tools...{{if not (eq .python_only "yes")}}
Databricks CLI is already installed. Skipping.{{end}}
git is already installed. Skipping.
{{if (eq .package_manager "poetry")}}poetry is already installed. Skipping.
pyenv is already installed. Skipping.
Setting up Python version 3.11.0
Pyenv configuration already exists in .zshrc. Skipping.{{end}}
{{if (eq .package_manager "uv")}}uv is already installed. Skipping.
Setting up Python version 3.11.0{{end}}
```

</details>

## `setup`

This command sets up the project development environment by configuring {{if (eq .package_manager "poetry")}}`Poetry`{{end}}{{if (eq .package_manager "uv")}}`uv`{{end}}, initializing `git` (if required), and installing `pre-commit` hooks.

<details>
  <summary>Usage</summary>

```bash
make setup
```

```bash
{{if not (eq .use_devcontainer "yes")}}Installing tools...
All tools installed successfully.{{end}}
Setting up the project...
{{if (eq .package_manager "poetry")}}python3 --version
Python 3.11.0
Creating virtualenv {{.project_name}} in /Users/username/{{.project_name}}/.venv
Installing dependencies from lock file

Package operations: 96 installs, 0 updates, 0 removals

  • Installing typing-extensions (4.9.0)
  • Installing tomli (2.0.1)
  • Installing typing-inspect (0.9.0)
  • Installing mypy-extensions (1.0.0)
  • ...
  • Installing pytest-cov (4.1.0)
  • Installing pytest-mock (3.11.1)

Installing the current project: {{.project_name}} (0.1.0){{end}}
{{if (eq .package_manager "uv")}}python3 --version
Python 3.11.0
Creating environment at '.venv'...
Installing with sync:
  Using index 'https://pypi.org/simple/' (https://pypi.org/simple/)...
  Copying pyproject.toml to disk...
  Resolving dependencies...
  Picked 66 packages to install:
    annotated-types==0.6.0
    anyio==4.2.0
    certifi==2023.11.17
    click==8.1.7
    ...
    python-dateutil==2.8.2
    pytz==2024.1
    regex==2023.12.25
    requests==2.31.0
    ...
    Installed 66 packages in 2.93s (pip: 1.75s){{end}}

Setting up git...
Setting up pre-commit...
pre-commit installed at .git/hooks/pre-commit
pre-commit installed at .git/hooks/commit-msg

Setup completed successfully!
```

</details>

## `clean`

This command cleans up your development environment by removing virtual environments, caches, and lock files.

<details>
  <summary>Usage</summary>

```bash
make clean
```

```bash
Uninstalling local packages...
{{if (eq .package_manager "poetry")}}rm -rf .venv poetry.lock{{end}}
{{if (eq .package_manager "uv")}}rm -rf .venv uv.lock{{end}}
Cleaning up project artifacts...
Cleanup completed.
```

</details>

## `test`

This command first updates {{if (eq .package_manager "poetry")}}Poetry dependencies{{end}}{{if (eq .package_manager "uv")}}dependencies using uv{{end}} and builds the package. Then, it runs a full test suite using `pytest`, generating a coverage report, for all the source code.

<details>
  <summary>Usage</summary>

```bash
make test
```

```bash
Running tests...
{{if (eq .package_manager "poetry")}}poetry run pytest tests --cov=src --cov-report term{{end}}
{{if (eq .package_manager "uv")}}uv run pytest tests --cov=src --cov-report term{{end}}

---------- coverage: platform darwin, python 3.11.0-final-0 ----------
Name                           Stmts   Miss  Cover
--------------------------------------------------
src/{{.package_name}}/__init__.py      1      0   100%
--------------------------------------------------
TOTAL                             1      0   100%
```

</details>
{{if not (eq .python_only "yes")}}
## `deploy_%`

This command deploys the pipeline to the Databricks workspace for the specified environment. It builds the package, runs linting checks, and deploys it using Databricks Asset Bundle.

<details>
  <summary>Usage</summary>

```bash
make deploy_dev
```

```bash
Running pre-commit checks...
{{if (eq .package_manager "poetry")}}poetry build{{end}}
{{if (eq .package_manager "uv")}}uv build{{end}}

Building {{.project_name}} (0.1.0)
  - Building sdist
  - Built {{.project_name}}-0.1.0.tar.gz
  - Building wheel
  - Built {{.project_name}}-0.1.0-py3-none-any.whl

Checking credentials for Databricks profile 'DEFAULT'...
Deploying project to workspace...
...
```

</details>

## `destroy_%`

This command destroys the deployed bundle in a target Databricks Workspace environment. The supported environments are `dev` and `prd`.

<details>
  <summary>Usage</summary>

```bash
make destroy_dev
make destroy_prd
```

```bash
Building platform...
The following resources will be deleted:
  delete job ingest_dataset_with_dlt
  delete job template_job
  delete pipeline dlt_ingest_dataset

All files and directories at the following location will be deleted: /Users/thomas.brouwer@revodata.nl/.bundle/{{.project_name}}/dev

Would you like to proceed? [y/n]: y
Deleting files...
Destroy complete!
```

</details>

## `repo`

This command creates a repository in RevoData's GitHub and sets it up as a remote for the local Git repository. This command requires that the GitHub CLI (`gh`) is installed and authenticated.

<details>
  <summary>Usage</summary>

```bash
make repo
```

```bash
Creating repository in RevoData's GitHub...
Repository created at revodatanl/{{.project_name}}...
Publishing project...
Repository published.
```

</details>

## `module`

This command provides a selection menu to deploy various custom RevoData modules. The available modules include:

- DLT
- Azure DevOps
- GitLab
- VSCode settings

<details>
  <summary>Usage</summary>

```bash
make module
```

```bash
Select the module to deploy:
1) Deploy Databricks Asset Bundle pipeline for GitHub
2) Deploy Databricks Asset Bundle pipeline for Azure DevOps
Enter the number of the module you want to deploy: 1

Your Databricks Asset Bundle deployment pipeline, has been added to the '.github/workflows' directory.
}```

</details>
{{end}}
## `tree`

This command generates a tree view of the project directory, excluding certain directories and files like `.venv`, `__pycache__`, and `.git`.

<details>
  <summary>Usage</summary>

```bash
make tree
```

```bash
.
├── .coverage
├── .github
│   ├── dependabot.yml
│   ├── pull_request_template.md
│   └── workflows
│       ├── ci.yml
│       ├── deploy-dab.yml
│       ├── semantic-pr.yml
│       └── semantic-release.yml
├── .gitignore
├── .pre-commit-config.yaml
├── .python-version
├── .vscode
│   ├── extensions.json
│   └── settings.json
├── Makefile
├── README.md
├── README_github.md
├── databricks.yml
├── dependabot.md
├── docs
│   ├── CHANGELOG.md
│   ├── api
│   │   ├── {{.package_name}}
│   │   │   ├── index.html
│   │   │   └── main.html
│   │   └── tests
│   │       ├── default_test.html
│   │       └── index.html
│   ├── assets
│   │   ├── badge-coverage.svg
│   │   ├── badge-tests.svg
│   │   ├── make-clean.png
│   │   ├── make-deploy_dev.png
│   │   ├── make-destroy_dev.png
│   │   ├── make-install.png
│   │   ├── make-module-azure-devops.png
│   │   ├── make-module-dlt.png
│   │   ├── make-module-gitlab.png
│   │   ├── make-module-vscode.png
│   │   ├── make-module.png
│   │   ├── make-repo-github.png
│   │   ├── make-repo.png
│   │   ├── make-setup.png
│   │   ├── make-test.png
│   │   └── make-tree.png
│   ├── bundle_deployment.md
│   ├── cicd.md
│   ├── coding_standards.md
│   ├── commands.md
│   ├── getting_started.md
│   ├── index.md
│   ├── jobs
│   │   └── index.md
│   ├── modules.md
│   ├── notebooks
│   │   └── index.md
│   ├── release.md
│   └── tests
│       ├── coverage
│       │   ├── class_index.html
│       │   ├── coverage_html_cb_6fb7b396.js
│       │   ├── favicon_32_cb_58284776.png
│       │   ├── function_index.html
│       │   ├── index.html
│       │   ├── keybd_closed_cb_ce680311.png
│       │   ├── status.json
│       │   ├── style_cb_8e611ae1.css
│       │   ├── z_df71c8327dd0b782___init___py.html
│       │   └── z_df71c8327dd0b782_main_py.html
│       ├── coverage_report.md
│       ├── test_configuration.md
│       └── tests.md
├── mkdocs.yml
├── poetry.lock
├── poetry.toml
├── pyproject.toml
├── resources
│   ├── jobs
│   │   ├── ingest_dataset_using_dlt.yml
│   │   └── template_job.yml
│   └── notebooks
│       ├── dlt_ingest_dataset.py
│       └── hello_revodata.py
├── src
│   └──
│       ├── __init__.py
│       └── main.py
└── tests
    ├── __init__.py
    └── default_test.py

19 directories, 73 files
```

</details>

## `docs`

Our project uses `MkDocs` to generate comprehensive HTML documentation from markdown files in the `docs` directory. In addition, we use `pdoc3` to auto-generate HTML documentation (from doctrings) of modules and tests. XML coverage reports are generated by `pytest-cov` and are available for CI/CD purposes.

To generate documentation, run the following command:

<details>
  <summary>Usage</summary>

```bash
make docs
```

```bash
Generating HTML documentation...
docs/api/{{.package_name}}/index.html
docs/api/{{.package_name}}/main.html
docs/api/tests/index.html
docs/api/tests/default_test.html
INFO    -  Cleaning site directory
INFO    -  Building documentation to directory: ./site
INFO    -  Documentation built in 0.24 seconds
INFO    -  Building documentation...
INFO    -  Cleaning site directory
INFO    -  Documentation built in 0.21 seconds
INFO    -  [14:20:30] Watching paths for changes: 'docs', 'mkdocs.yml'
INFO    -  [14:20:30] Serving on http://127.0.0.1:8000/
```

</details>

<!--
HTML coverage reports are disabled by default. To enable them:
1. Edit the Makefile and uncomment the HTML coverage generation lines in the "docs" target
2. Run `make docs` to generate the HTML coverage report
3. See docs/tests/coverage_report.md for more information
-->
