{{if (eq .package_manager "uv")}}[project]
name = "{{.package_name}}"
version = "0.1.0"
description = "{{.description}}"
authors = [
    { name = "{{.author}}", email = "notifications@example.com" },
]
readme = "README.md"
requires-python = {{if not (eq .python_only "yes")}}">=3.11"{{else}}">=3.12"{{end}}
dependencies = []

[tool.uv]
package = true
dev-dependencies = [
    "bandit>=1.7.10",
    "coverage>=7.6.5",{{if not (eq .python_only "yes")}}
    "databricks-dlt>=0.2.1",
    "databricks-sdk>=0.37.0",{{end}}
    "mkdocs-material>=9.5.38",
    "mkdocs>=1.6.1",
    "mypy>=1.13.0",
    "pdoc3>=0.11.1",
    "pre-commit>=3.8.0",
    "pydoclint>=0.5.8",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "pytest>=8.3.3",
    "ruff>=0.7.3",
    "sqlfluff>=3.2.5",
]

[project.scripts]
main = "{{.package_name}}.main:main"{{end}}{{if (eq .package_manager "poetry")}}[tool.poetry]
name = "{{.package_name}}"
version = "0.1.0"
description = "{{.description}}"
authors = [
    "{{.author}} <notifications@example.com>",
]
readme = "README.md"
classifiers = ["Programming Language :: Python :: {{if not (eq .python_only "yes")}}3.11{{else}}3.12{{end}}", "Operating System :: OS Independent"]
packages = [{ include = "{{.package_name}}", from = "src" }]
scripts = { "main" = "{{.package_name}}.main:main" }

[tool.poetry.dependencies]
python = {{if not (eq .python_only "yes")}}"^3.11.0"  # Databricks Runtime 15.4 LTS
numpy = "1.23.5"   # Databricks Runtime 15.4 LTS
pandas = "1.5.3"   # Databricks Runtime 15.4 LTS{{else}}"^3.12.0"{{end}}

[tool.poetry.dev-dependencies]
bandit = "^1.7.10"
coverage = "^7.6.5"{{if not (eq .python_only "yes")}}
databricks-dlt = "^0.2.1"
databricks-sdk = "^0.37.0"{{end}}
ipykernel = "^6.29.5"
mkdocs = "^1.6.1"
mkdocs-material = "^9.5.36"
mypy = "^1.13.0"
pdoc3 = "^0.11.1"
pre-commit = "^4.0.1"
pydoclint = "^0.5.8"
pytest = "^8.3.3"
pytest-cov = "^6.0.0"
pytest-mock = "^3.14.0"
ruff = "^0.7.3"
sqlfluff = "^3.2.5"

[tool.poetry.group.types.dependencies]
{{if not (eq .python_only "yes")}}pandas-stubs = "^2.2.2.240807"  # Databricks Runtime 15.4 LTS{{end}}

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"{{end}}

[tool.ruff]
src = ["src"]
target-version = {{if not (eq .python_only "yes")}}"py311"{{else}}"py312"{{end}}
line-length = 100
extend-include = ["*.ipynb"]
extend-exclude = ["scratch"]

[tool.ruff.lint]
pydocstyle.convention = "numpy"
external = ["DOC"]
select = ["ALL"]
ignore = [
    "ANN101",   # "Missing type annotation for `self`." Deprecated.
    "COM812",   # "Missing trailing comma." Ignored since it conflicts with the formatter.
    "D203",     # "One blank line required before class docstring." Should be disabled by default.
    "D213",     # "Multi-line docstring summary should start at the second line." Should be disabled by default.
    "E501",     # "Line too long." Sometimes my comments are a bit longer.
    "E731",     # "Do not assign a lambda expression, use a def." Needed for spark UDFs.
    "ERA001",   # "Found commented out code." I comment out code sometimes
    "FBT001",   # "Boolean positional arg in function definition." I sometimes use this.
    "FBT002",   # "Boolean default value in function definition." I sometimes use this too.
    "FBT003",   # "Boolean positional value in function call." This is fairly common in spark.
    "ISC001",   # "Implicit string concatenation." Ignored since it conflicts with the formatter.
    "N812",     # "Lowercase `functions` imported as non-lowercase." Pretty standard for spark programming.
    "S101",     # "Use of `assert` detected." Used quite often in tests.
    "T201",     # "`print` found." I use this for debugging.
]
unfixable = [
    "F401",     # "Unused import." Disabled since it makes linting/formatting notebooks messy and impossible.
]

[tool.ruff.lint.per-file-ignores]
"notebooks/**/*.py" = [
    "D100",     # "Missing docstring in public module." Not needed for Databricks notebooks.
    "INP001",   # "Part of an implicit namespace package. Add an `__init__.py`." Not needed for Databricks notebooks.
]
"tests/*.py" = [
    "PLR2004",  # "Magic value used in comparison, consider replacing with a constant variable." This is fine for tests.
]

[tool.mypy]
python_version = {{if not (eq .python_only "yes")}}"3.11"{{else}}"3.12"{{end}}
mypy_path = ["src"]
strict = true
disallow_untyped_decorators = false
exclude = "scratch"

[[tool.mypy.overrides]]
module = ["dlt"]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = ["src"]

[tool.pydoclint]
style = "numpy"
exclude = ".git|.venv|scratch"

[tool.bandit]
targets = ["src"]
skips = [
    "B608",     # Possible SQL injection vector through string-based query construction.
]
exclude_dirs = [".venv", "archive", "scratch", "tests"]

[tool.semantic_release]
{{if (eq .package_manager "poetry")}}version_toml = ["pyproject.toml:tool.poetry.version"]{{end}}{{if (eq .package_manager "uv")}}version_toml = ["pyproject.toml:project.version"]{{end}}
major_on_zero = true
branch = "main"
commit_author = "github-actions[bot] <actions@github.com>"
changelog_generate = false

[tool.sqlfluff.core]
dialect = "databricks"
templater = "jinja"
max_line_length = 120
ignore = "parsing"

[tool.sqlfluff.indentation]
indented_joins = false
indented_using_on = true
template_blocks_indent = false

[tool.sqlfluff.rules.capitalisation.keywords]
capitalisation_policy = "upper"
