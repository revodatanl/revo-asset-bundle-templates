[tool.poetry]
name = "{{.project_name}}"
version = "0.1.0"
description = "{{.description}}"
authors = [
    "{{.author}} <{{.email}}>",
]
readme = "README.md"
classifiers = ["Programming Language :: Python :: 3.10.12", "Operating System :: OS Independent"]
packages = [{ include = "{{.package_name}}", from = "src" }]
scripts = { "main" = "{{.package_name}}.main:main" }

[tool.poetry.dependencies]
python = "3.10.*"  # Databricks Runtime 14.3 LTS
numpy = "1.23.5"   # Databricks Runtime 14.3 LTS
pandas = "1.5.3"   # Databricks Runtime 14.3 LTS

[tool.poetry.dev-dependencies]
coverage = "^7.6.1"
databricks-dlt = "^0.2.1"
defusedxml = "^0.7.1"
genbadge = "^1.1.1"
git-cliff = "^2.6.0"
ipykernel = "^6.29.5"
mkdocs = "^1.6.1"
mkdocs-material = "^9.5.36"
mypy = "^1.11.2"
mypy-extensions = "^1.0.0"
pdoc3 = "^0.11.1"
pre-commit = "^4.0.0"
pydoclint = "^0.5.8"
pytest = "^8.3.3"
pytest-cov = "^5.0.0"
pytest-mock = "^3.14.0"
ruff = "^0.6.8"

[tool.poetry.group.types.dependencies]
pandas-stubs = "^2.2.2.240807"  # Databricks Runtime 14.3 LTS

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
src = ["src"]
target-version = "py310"
line-length = 100
extend-include = ["*.ipynb"]
exclude = ["scratch"]
builtins = ["dbutils", "display", "spark"]

[tool.ruff.lint]
pydocstyle.convention = "numpy"
external = ["DOC"]
select = ["ALL"]
ignore = [
    "D203",     # "One blank line required before class docstring." Should be disabled by default.
    "D213",     # "Multi-line docstring summary should start at the second line." Should be disabled by default.
    "E501",     # "Line too long." Sometimes my comments are a bit longer.
    "S101",     # "Use of `assert` detected." Used quite often in tests.
    "FBT001",   # "Boolean positional arg in function definition." I sometimes use this.
    "FBT002",   # "Boolean default value in function definition." I sometimes use this too.
    "ERA001",   # "Found commented out code." I comment out code sometimes
    "E731",     # "Do not assign a lambda expression, use a def." Needed for spark UDFs.
    "N812",     # "Lowercase `functions` imported as non-lowercase." Pretty standard for spark programming.
    "COM812",   # "Missing trailing comma." Ignored since it conflicts with the formatter.
    "ISC001",   # "Implicit string concatenation." Ignored since it conflicts with the formatter.
    "T201",     # "`print` found." I use this for debugging.
    "FBT003",   # "Boolean positional value in function call." This is fairly common in spark.
    "ANN101",   # "Missing type annotation for `self`." Deprecated.
]
unfixable = [
    "F401",     # "Unused import." Disabled since it makes linting/formatting notebooks messy and impossible.
]

[tool.ruff.lint.per-file-ignores]
"resources/**/*.py" = [
    "INP001",   # "Part of an implicit namespace package. Add an `__init__.py`." Not needed for Databricks notebooks.
    "D100",     # "Missing docstring in public module." Not needed for Databricks notebooks.
]
"tests/*.py" = [
    "PLR2004",  # "Magic value used in comparison, consider replacing with a constant variable." This is fine for tests.
]

[tool.mypy]
python_version = "3.10"
mypy_path = ["src"]
strict = true
disallow_untyped_decorators = false
disable_error_code = ["name-defined"]  # Workaround to ignore: spark, dbutils, display, dlt
exclude = ["scratch"]

[[tool.mypy.overrides]]
module = ["dlt"]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = ["src"]

[tool.pydoclint]
style = "numpy"
exclude = ".git|.venv|scratch"

[tool.semantic_release]
version_toml = ["pyproject.toml:tool.poetry.version"]
major_on_zero = true
branch = "main"
commit_author = "github-actions[bot] <actions@github.com>"
changelog_generate = false

[tool.git-cliff.changelog]
header = """
# Changelog\n
All notable changes to this project will be documented in this file.\n
"""
body = """
{% if version %}\
    ## [{{ "{{" }} version | trim_start_matches(pat="v") {{ "}}" }}] - {{ "{{" }} timestamp | date(format="%Y-%m-%d") {{ "}}" }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ "{{" }} group | striptags | trim | upper_first {{ "}}" }}
    {% for commit in commits %}
        - {% if commit.scope %}*({{ "{{" }} commit.scope {{ "}}" }})* {% endif %}\
            {% if commit.breaking %}[**breaking**] {% endif %}\
            {{ "{{" }} commit.message | upper_first {{ "}}" }}\
    {% endfor %}
{% endfor %}\n
"""
trim = true

[tool.git-cliff.git]
conventional_commits = true
filter_unconventional = true
split_commits = false
commit_parsers = [
  { message = "^feat", group = "<!-- 0 -->üöÄ Features" },
  { message = "^fix", group = "<!-- 1 -->üêõ Bug Fixes" },
  { message = "^doc", group = "<!-- 3 -->üìö Documentation" },
  { message = "^perf", group = "<!-- 4 -->‚ö° Performance" },
  { message = "^refactor", group = "<!-- 2 -->üöú Refactor" },
  { message = "^style", group = "<!-- 5 -->üé® Styling" },
  { message = "^test", group = "<!-- 6 -->üß™ Testing" },
  { message = "^chore\\(release\\)", skip = true },
  { message = "^chore\\(deps.*\\)", skip = true },
  { message = "^chore\\(pr\\)", skip = true },
  { message = "^chore\\(pull\\)", skip = true },
  { message = "^chore|^ci", group = "<!-- 7 -->‚öôÔ∏è Miscellaneous Tasks" },
  { body = ".*security", group = "<!-- 8 -->üõ°Ô∏è Security" },
  { message = "^revert", group = "<!-- 9 -->‚óÄÔ∏è Revert" },
  { message = "^build", group = "<!-- 10 -->üèóÔ∏è Build System" },
]
filter_commits = false
topo_order = false
sort_commits = "oldest"
