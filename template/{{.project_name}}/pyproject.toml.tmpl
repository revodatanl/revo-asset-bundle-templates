[project]
name = "{{template `package_name` .}}"
version = "0.1.0"
description = "{{.project_description}}"
authors = [
    { name = "{{.author}}", email = "{{.email}}" },
]
readme = "README.md"
requires-python = ">=3.12,<4.0"
scripts = { "main" = "{{template `package_name` .}}.main:main" }
classifiers = ["Programming Language :: Python :: 3.12", "Operating System :: OS Independent"]
dependencies = []

[dependency-groups]
dev = [
    "databricks-connect==16.4.*",{{if (eq .include_example_jobs "yes")}}
    "databricks-dlt>=0.3.0",{{end}}
    "databricks-sdk>=0.67.0",
    "commitizen>=4.9.1",
    "mypy>=1.18.2",
    "pip>=25.2",
    "prek>=0.2.5",
    "pydoclint>=0.7.3",
    "pytest-cov>=7.0.0",
    "pytest-mock>=3.15.1",
    "pytest>=8.4.2",
    "ruff>=0.13.1",
]

[tool.uv]
package = true

[tool.ruff]
target-version = "py312"
line-length = 100
extend-include = ["*.ipynb"]
extend-exclude = ["scratch"]
builtins = ["dbutils", "display", "spark"]

[tool.ruff.lint]
pydocstyle.convention = "numpy"
external = ["DOC"]
select = ["ALL"]
ignore = [
    "BLE001",   # "Do not catch blind exception: `Exception`"
    "COM812",   # "Checks for the absence of trailing commas" - redundant when used in tandem with the formatter
    "D100",     # "Missing docstring in public module"
    "D104",     # "Missing docstring in public package"
    "D105",     # "Missing docstring in magic method"
    "D106",     # "Missing docstring in public nested class"
    "D107",     # "Missing docstring in __init__"
    "D203",     # "One blank line required before class docstring" - should be disabled by default
    "D213",     # "Multi-line docstring summary should start at the second line" - should be disabled by default
    "D400",     # "First line should end with a period"
    "D401",     # "First line of docstring should be in imperative mood"
    "E501",     # "Line too long"
    "ERA001",   # "Found commented out code"
    "FBT001",   # "Boolean positional arg in function definition"
    "FBT002",   # "Boolean default value in function definition"
    "FBT003",   # "Boolean positional value in function call"
    "G004",     # "Logging statement uses f-string"
    "ISC001",   # "Implicit string concatenation" - conflicts with the formatter
    "N812",     # "Lowercase `functions` imported as non-lowercase"
    "PLR2004",  # "Magic value used in comparison, consider replacing with a constant variable"
    "T201",     # "`print` found"
    "TRY003"    # "Avoid specifying long messages outside the exception class"
]

[tool.ruff.lint.per-file-ignores]
"notebooks/**/*.py" = [
    "D100",     # "Missing docstring in public module" - not needed for Databricks notebooks
    "INP001",   # "Part of an implicit namespace package. Add an `__init__.py`" - not needed for Databricks notebooks
]
"tests/*.py" = [
    "PLR2004",  # "Magic value used in comparison, consider replacing with a constant variable"
    "S101",     # "Use of `assert` detected"
]

[tool.mypy]
packages = ["src"]
mypy_path = "src"
python_version = "3.12"
strict = true
disallow_untyped_decorators = false
exclude = "scratch"

[[tool.mypy.overrides]]
module = "dlt"
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = ["src"]

[tool.coverage.run]
omit = ["*/__init__.py"]

[tool.pydoclint]
style = "numpy"
exclude = ".git|.venv|scratch"

[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "$version"
version_scheme = "pep440"
version_provider = "uv"
update_changelog_on_bump = true
